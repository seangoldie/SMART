package algomusic2021.seangoldie.jsyn.voices;

/**************
** WARNING - this code automatically generated by Syntona.
** The real source is probably a Syntona patch.
** Do NOT edit this file unless you copy it to another directory and change the name.
** Otherwise it is likely to get clobbered the next time you
** export Java source code from Syntona.
**
** Syntona is available from: http://www.softsynth.com/syntona/
*/

import com.jsyn.ports.UnitOutputPort;
import com.jsyn.unitgen.UnitVoice;
import com.jsyn.unitgen.VariableRateMonoReader;
import com.jsyn.unitgen.Add;
import com.jsyn.unitgen.PowerOfTwo;
import com.jsyn.ports.UnitInputPort;
import com.jsyn.unitgen.Multiply;
import com.jsyn.unitgen.SineOscillator;
import com.softsynth.shared.time.TimeStamp;
import com.jsyn.unitgen.PassThrough;
import com.jsyn.data.SegmentedEnvelope;
import com.jsyn.unitgen.Circuit;

public class ChowningPairSustainUpdated extends Circuit implements UnitVoice {
    // Declare units and ports.
    PassThrough mFrequencyPassThrough;
    public UnitInputPort frequency;
    PassThrough mAmplitudePassThrough;
    public UnitInputPort amplitude;
    PassThrough mOutputPassThrough;
    public UnitOutputPort output;
    SineOscillator mCarrierOsc;
    SineOscillator mModOsc;
    VariableRateMonoReader mMonoRdr;
    SegmentedEnvelope mSegEnv;
    Multiply mAtimes;
    Add mAplus;
    Multiply mAtimes2;
    PowerOfTwo mAPower22;
    Multiply mAtimes3;
    PassThrough mModFreqScalePassThrough;
    public UnitInputPort modFreqScale;
    PassThrough mDistAmountPassThrough;
    public UnitInputPort distAmount;

    // Declare inner classes for any child circuits.

    public ChowningPairSustainUpdated() {
        // Create unit generators.
        add(mFrequencyPassThrough = new PassThrough());
        addPort(frequency = mFrequencyPassThrough.input, "frequency");
        add(mAmplitudePassThrough = new PassThrough());
        addPort(amplitude = mAmplitudePassThrough.input, "amplitude");
        add(mOutputPassThrough = new PassThrough());
        addPort( output = mOutputPassThrough.output, "output");
        add(mCarrierOsc = new SineOscillator());
        add(mModOsc = new SineOscillator());
        add(mMonoRdr = new VariableRateMonoReader());
        double[] mSegEnvData = {
            8.98417739285292E-4, 0.013157894736842105,
            0.04447167809462196, 1.0,
            0.06648291270711161, 1.0,
            0.0507662483816238, 0.3991228070175439,
            0.07302954248723537, 0.0,
        };
        mSegEnv = new SegmentedEnvelope( mSegEnvData );
        mSegEnv.setSustainBegin( 3 );
        mSegEnv.setSustainEnd( 3 );
        add(mAtimes = new Multiply());
        add(mAplus = new Add());
        add(mAtimes2 = new Multiply());
        add(mAPower22 = new PowerOfTwo());
        add(mAtimes3 = new Multiply());
        add(mModFreqScalePassThrough = new PassThrough());
        addPort(modFreqScale = mModFreqScalePassThrough.input, "modFreqScale");
        add(mDistAmountPassThrough = new PassThrough());
        addPort(distAmount = mDistAmountPassThrough.input, "distAmount");
        // Connect units and ports.
        mFrequencyPassThrough.output.connect(mAtimes.inputA);
        mFrequencyPassThrough.output.connect(mAplus.inputA);
        mFrequencyPassThrough.output.connect(mAtimes2.inputB);
        mCarrierOsc.output.connect(mAtimes3.inputA);
        mModOsc.output.connect(mAtimes.inputB);
        mMonoRdr.output.connect(mCarrierOsc.amplitude);
        mMonoRdr.output.connect(mModOsc.amplitude);
        mAtimes.output.connect(mAplus.inputB);
        mAplus.output.connect(mCarrierOsc.frequency);
        mAtimes2.output.connect(mModOsc.frequency);
        mAPower22.output.connect(mAtimes3.inputB);
        mAtimes3.output.connect(mOutputPassThrough.input);
        mModFreqScalePassThrough.output.connect(mAtimes2.inputA);
        mDistAmountPassThrough.output.connect(mAPower22.input);
        // Setup
        frequency.setup(0.0, 130.8127826502993, 261.6255653005986);
        amplitude.setup(0.0, 0.5, 1.0);
        mMonoRdr.amplitude.set(1.0);
        mMonoRdr.rate.set(1.0);
        modFreqScale.setup(0.0, 1.0, 2.0);
        distAmount.setup(0.0, 0.720791, 10.0);
    }

    public void noteOn(double frequency, double amplitude, TimeStamp timeStamp) {
        this.frequency.set(frequency, timeStamp);
        this.amplitude.set(amplitude, timeStamp);
        mMonoRdr.dataQueue.queueOn( mSegEnv, timeStamp);
    }

    public void noteOff(TimeStamp timeStamp) {
        mMonoRdr.dataQueue.queueOff( mSegEnv, false, timeStamp);
    }
    
    public UnitOutputPort getOutput() {
        return output;
    }
}
