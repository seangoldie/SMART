package algomusic2021.seangoldie.jsyn.voices;

/**************
** WARNING - this code automatically generated by Syntona.
** The real source is probably a Syntona patch.
** Do NOT edit this file unless you copy it to another directory and change the name.
** Otherwise it is likely to get clobbered the next time you
** export Java source code from Syntona.
**
** Syntona is available from: http://www.softsynth.com/syntona/
*/

import com.jsyn.ports.UnitOutputPort;
import com.jsyn.unitgen.UnitVoice;
import com.jsyn.unitgen.SawtoothOscillator;
import com.jsyn.unitgen.VariableRateMonoReader;
import com.jsyn.ports.UnitInputPort;
import com.jsyn.unitgen.Multiply;
import com.jsyn.unitgen.MixerMonoRamped;
import com.softsynth.shared.time.TimeStamp;
import com.jsyn.unitgen.PassThrough;
import com.jsyn.unitgen.FilterLowPass;
import com.jsyn.data.SegmentedEnvelope;
import com.jsyn.unitgen.Circuit;

public class FilteredSawThreeOscVoice extends Circuit implements UnitVoice {
    // Declare units and ports.
    PassThrough mFrequencyPassThrough;
    public UnitInputPort frequency;
    PassThrough mAmplitudePassThrough;
    public UnitInputPort amplitude;
    PassThrough mOutputPassThrough;
    public UnitOutputPort output;
    PassThrough mFilterFreqPassThrough;
    public UnitInputPort filterFreq;
    PassThrough mOsc2FreqSpreadPassThrough;
    public UnitInputPort Osc2FreqSpread;
    Multiply mOsc2Spread;
    FilterLowPass mLowPass;
    SawtoothOscillator mSawOsc2;
    SegmentedEnvelope mAmpFilterEnv;
    VariableRateMonoReader mMonoRdr;
    SawtoothOscillator mSawOscBase;
    SawtoothOscillator mSawOsc3;
    Multiply mOsc3Spread;
    PassThrough mOsc3FreqSpreadPassThrough;
    public UnitInputPort Osc3FreqSpread;
    MixerMonoRamped mMix4x1;

    // Declare inner classes for any child circuits.

    public FilteredSawThreeOscVoice() {
        // Create unit generators.
        add(mFrequencyPassThrough = new PassThrough());
        addPort(frequency = mFrequencyPassThrough.input, "frequency");
        add(mAmplitudePassThrough = new PassThrough());
        addPort(amplitude = mAmplitudePassThrough.input, "amplitude");
        add(mOutputPassThrough = new PassThrough());
        addPort( output = mOutputPassThrough.output, "output");
        add(mFilterFreqPassThrough = new PassThrough());
        addPort(filterFreq = mFilterFreqPassThrough.input, "filterFreq");
        add(mOsc2FreqSpreadPassThrough = new PassThrough());
        addPort(Osc2FreqSpread = mOsc2FreqSpreadPassThrough.input, "Osc2FreqSpread");
        add(mOsc2Spread = new Multiply());
        add(mLowPass = new FilterLowPass());
        add(mSawOsc2 = new SawtoothOscillator());
        double[] mAmpFilterEnvData = {
            1.0, 1.0,
            0.5, 0.5,
            0.5, 0.0,
        };
        mAmpFilterEnv = new SegmentedEnvelope( mAmpFilterEnvData );
        add(mMonoRdr = new VariableRateMonoReader());
        add(mSawOscBase = new SawtoothOscillator());
        add(mSawOsc3 = new SawtoothOscillator());
        add(mOsc3Spread = new Multiply());
        add(mOsc3FreqSpreadPassThrough = new PassThrough());
        addPort(Osc3FreqSpread = mOsc3FreqSpreadPassThrough.input, "Osc3FreqSpread");
        add(mMix4x1 = new MixerMonoRamped(4));
        // Connect units and ports.
        mFrequencyPassThrough.output.connect(mSawOscBase.frequency);
        mFrequencyPassThrough.output.connect(mOsc2Spread.inputA);
        mFrequencyPassThrough.output.connect(mOsc3Spread.inputA);
        mFilterFreqPassThrough.output.connect(mLowPass.frequency);
        mOsc2FreqSpreadPassThrough.output.connect(mOsc2Spread.inputB);
        mOsc2Spread.output.connect(mSawOsc2.frequency);
        mLowPass.output.connect(mOutputPassThrough.input);
        mSawOsc2.output.connect(0, mMix4x1.input, 1);
        mMonoRdr.output.connect(mLowPass.amplitude);
        mMonoRdr.output.connect(mSawOsc2.amplitude);
        mMonoRdr.output.connect(mSawOscBase.amplitude);
        mMonoRdr.output.connect(mSawOsc3.amplitude);
        mSawOscBase.output.connect(mMix4x1.input);
        mSawOsc3.output.connect(0, mMix4x1.input, 2);
        mOsc3Spread.output.connect(mSawOsc3.frequency);
        mOsc3FreqSpreadPassThrough.output.connect(mOsc3Spread.inputB);
        mMix4x1.output.connect(mLowPass.input);
        // Setup
        frequency.setup(0.0, 293.6647679174076, 587.3295358348151);
        amplitude.setup(0.0, 0.5, 1.0);
        filterFreq.setup(200.0, 500.0, 6000.0);
        Osc2FreqSpread.setup(1.0, 1.25, 3.0);
        mLowPass.Q.set(1.0);
        mMonoRdr.amplitude.set(1.0);
        mMonoRdr.rate.set(1.0);
        Osc3FreqSpread.setup(1.0, 1.5, 3.0);
        mMix4x1.input.set(3, 0.0);
        mMix4x1.gain.set(0.25);
        mMix4x1.gain.set(1, 0.25);
        mMix4x1.gain.set(2, 0.25);
        mMix4x1.gain.set(3, 0.25);
        mMix4x1.amplitude.set(1.0);
    }

    public void noteOn(double frequency, double amplitude, TimeStamp timeStamp) {
        this.frequency.set(frequency, timeStamp);
        this.amplitude.set(amplitude, timeStamp);
        mMonoRdr.dataQueue.queueOn( mAmpFilterEnv, timeStamp);
    }

    public void noteOff(TimeStamp timeStamp) {
        mMonoRdr.dataQueue.queueOff( mAmpFilterEnv, false, timeStamp);
    }
    
    public UnitOutputPort getOutput() {
        return output;
    }
}
